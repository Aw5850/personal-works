var appendItem, resolveComma, resolveDollar;

exports.appendItem = appendItem = function(xs, level, buffer) {
  var last, res;
  if (level === 0) {
    return xs.concat([buffer]);
  } else {
    last = xs.length - 1;
    res = appendItem(xs[last], level - 1, buffer);
    return xs.slice(0, -1).concat([res]);
  }
};

exports.createNesting = function(n) {
  var create;
  create = function(xs, n) {
    if (n <= 1) {
      return xs;
    } else {
      return [create(xs, n - 1)];
    }
  };
  return create([], n);
};

exports.resolveDollar = resolveDollar = function(xs) {
  var repeat;
  if (xs.length === 0) {
    return xs;
  }
  repeat = function(before, after) {
    var cursor;
    if (after.length === 0) {
      return before;
    }
    cursor = after[0];
    if (Array.isArray(cursor)) {
      return repeat(before.concat([resolveDollar(cursor)]), after.slice(1));
    } else if (cursor.text === '$') {
      return before.concat([resolveDollar(after.slice(1))]);
    } else {
      return repeat(before.concat([cursor]), after.slice(1));
    }
  };
  return repeat([], xs);
};

exports.resolveComma = resolveComma = function(xs) {
  var repeat;
  if (xs.length === 0) {
    return xs;
  }
  repeat = function(before, after) {
    var cursor, head;
    if (after.length === 0) {
      return before;
    }
    cursor = after[0];
    if ((Array.isArray(cursor)) && (cursor.length > 0)) {
      head = cursor[0];
      if (Array.isArray(head)) {
        return repeat(before.concat([resolveComma(cursor)]), after.slice(1));
      } else if (head.text === ',') {
        return repeat(before, (resolveComma(cursor.slice(1))).concat(after.slice(1)));
      } else {
        return repeat(before.concat([resolveComma(cursor)]), after.slice(1));
      }
    } else {
      return repeat(before.concat([cursor]), after.slice(1));
    }
  };
  return repeat([], xs);
};
